version: 2
jobs:
  build:
    parallelism: 1
    docker:
    - image: circleci/ruby:2.4.4-jessie-node
      environment:
        RAILS_ENV: test
    - image: circleci/postgres:9.6.2-alpine
      environment:
        POSTGRES_DB: postgres
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: crisiscleanup       
    steps:
    - checkout
    
    # Which version of bundler?
    - run:
        name: Which bundler?
        command: bundle -v

    # Restore bundle cache
    - restore_cache:
        keys:
          - rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
          - rails-demo-bundle-v2-
    
    # Install gem dependencies
    - run:
        name: Bundle Install
        command: bundle check --path=vendor/bundle || bundle install --path=vendor/bundle
        
    # Store bundle cache
    - save_cache:
        key: rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
        paths:
          - vendor/bundle

    # Only necessary if app uses webpacker or yarn in some other way
    - restore_cache:
        keys:
          - rails-demo-yarn-{{ checksum "yarn.lock" }}
          - rails-demo-yarn-

    - run:
        name: Yarn Install
        command: yarn install --cache-folder ~/.cache/yarn

    # Store yarn / webpacker cache
    - save_cache:
        key: rails-demo-yarn-{{ checksum "yarn.lock" }}
        paths:
          - ~/.cache/yarn        

    # - run: bundle exec rake assets:precompile
    
    - run: 
        name: ESLint
        command: bin/webpack

    - run:
        name: Wait for DB
        command: dockerize -wait tcp://localhost:5432 -timeout 1m

    - run:
        command: bundle exec rake db:create db:schema:load --trace
        environment:
          RAILS_ENV: test
          RACK_ENV: test
          
    - run:
        name: Run rspec in parallel
        command: |
          bundle exec rspec --profile 10 \
                            --format RspecJunitFormatter \
                            --out test_results/rspec.xml \
                            --format progress \
                            $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
                            
    # Save test results for timing analysis
    - store_test_results:
        path: test_results                            
        
    - store_artifacts:
        path: coverage        